#+TITLE: Dooz
#+TODO: TODO NEWSETUP

* References & Resources
+ Doom config: https://github.com/tecosaur/emacs-config/blob/master/config.org


* Defaults
#+begin_src elisp
(setq org-directory "~/not-defteri/"
      org-use-property-inheritance t
      org-log-done 'time
      org-list-allow-alphabetical t)
#+end_src

For better cooperation with window manager.
#+begin_src elisp
(setq frame-resize-pixelwise t)
#+end_src

** Me
#+begin_src elisp
(setq user-mail-address "oguz.serbetci@gmail.com"
      user-full-name "Oğuz Şerbetçi")
#+end_src

** Performance
#+begin_src elisp
(add-to-list 'default-frame-alist '(inhibit-double-buffering . t))
(setq display-line-numbers-type nil)
(setq smartparens-global-mode nil)
(setq read-process-output-max (* 8 1024 1024) ; 1mb
      gc-cons-threshold (* 8 1024 1024))
(run-with-idle-timer 2 t (lambda () (garbage-collect)))
#+end_src

** Fixes
*** MacOS
Use gnu-ls https://stackoverflow.com/questions/25125200/emacs-error-ls-does-not-support-dired.
#+begin_src elisp
(when (string= system-type "darwin")
  (setq dired-use-ls-dired t
        insert-directory-program "/usr/local/bin/gls"
        dired-listing-switches "-aBhl --group-directories-first"))
#+end_src


* Note taking
Set dictionary language.
#+begin_src elisp
(setq ispell-dictionary "english")
(after! spell-fu
  (setq spell-fu-idle-delay 0.5))  ; default is 0.25

(setq ispell-program-name "aspell")
(setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))
(setq spell-fu-directory (concat doom-emacs-dir ".local/etc/spell-fu/dictionary"))
(setq ispell-personal-dictionary (concat doom-emacs-dir ".local/etc/spell-fu/dictionary/.pws"))
#+end_src

Encription
#+begin_src elisp
(setq org-crypt-key "476C864EF4C2235DF2177345F2EBCD5DEFEFC0A2")
(setenv "GPG_AGENT_INFO" nil)

(setq epa-file-encrypt-to "oguz.serbetci@posteo.net")
#+end_src

#+begin_src elisp
(doom-themes-org-config)

(setq deft-directory org-directory)

(setq ispell-dictionary "en_US")

(remove-hook 'text-mode-hook #'auto-fill-mode)
(add-hook 'message-mode-hook #'word-wrap-mode)
#+end_src

#+begin_src elisp
(setq +latex-viewers '(pdf-tools))
#+end_src

** org-roam & bibliography
*** Bibliography

Configure bibtex-completion.
#+begin_src elisp
(setq! citar-library-paths '("~/Resources/Papers/Library.bib")
       citar-notes-paths '("~/not-defteri/"))
;; (use-package! bibtex-completion
;;   :config
;;   (add-to-list 'bibtex-completion-additional-search-fields 'journaltitle)

;;   (setq bibtex-completion-bibliography '("~/Resources/Papers/Library.bib"
;;                                          "~/Resources/Papers/ImpactNexus/ImpactNexus.bib")
;;         bibtex-completion-library-path "~/Resources/Papers/")
;;   )

#+end_src

#+begin_src elisp
(setq reftex-default-bibliography '("~/Resources/Papers/Library.bib"
                                    "~/Resources/Papers/ImpactNexus/ImpactNexus.bib"))
#+end_src

Configure PDF.
#+begin_src elisp
(after! pdf-tools
  (setq pdf-annot-list-highlight-type t)
  (setq-default pdf-view-display-size 'fit-width)

  ;; (push '("f1fa8c" "ffb86c" "#50fa7b" "ff5555" "#8be9fd" "bd93f9" "ff79c6") pdf-annot-color-history)
  ;; https://github.com/politza/pdf-tools/issues/35
  ;; (push '(color . "#000000") pdf-annot-default-markup-annotation-properties)
  )

(after! org-pdftools
  (setq org-pdftools-root-dir "~/Resources/Papers"))
#+end_src


*** org-roam
Use org-ref for citation in org-mode.
#+begin_src elisp :tangle packages.el
;; (package! org-ref :recipe (:host github :repo "jkitchin/org-ref"))
#+end_src

#+begin_src elisp
;; (use-package! org-ref
;;   :config
;;   (setq org-ref-completion-library 'org-ref-ivy-cite))
#+end_src

#+begin_src elisp :tangle packages.el
(package! org-roam-bibtex
  :recipe (:host github :repo "org-roam/org-roam-bibtex")
  )

(unpin! org-roam)

(unpin! bibtex-completion helm-bibtex ivy-bibtex)
#+end_src

#+begin_src elisp
(after! org-roam
  :config
  (setq org-roam-capture-templates
        '(("d" "default" plain "%?"
           :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org.gpg"
                              "#+title: ${title}\n")
           :unnarrowed t)
          ;; bibliography note template
          ("r" "bibliography reference" plain "%?"
           :if-new
           (file+head "bibliography/${citekey}.org.gpg" "#+title: ${title}\n")
           :unnarrowed t)
          ("m" "meeting" entry
           "* %T %?" :clock-in t
           :target (file+head "%<%Y-%m-%d>.org.gpg"
                              "#+title: %<%Y-%m-%d>\n"))))
  )

If you cloned the repository
(use-package! org-roam-bibtex
  :after org-roam
  ;; :hook (org-roam-mode . org-roam-bibtex-mode)
  :bind (:map org-mode-map
         (("C-c n a" . orb-note-actions)))
  )
#+end_src


*** Roam server
#+begin_src elisp :tangle packages.el
(package! org-roam-server
  :recipe (:host github :repo "org-roam/org-roam-server"))
#+end_src

#+begin_src elisp
(use-package! org-roam-server
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 7070
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
#+end_src

* Task Management
** Agenda
#+begin_src elisp
(after! org-agenda
  (setq org-stuck-projects
        '("/+PROJ" ("NEXT" "WAIT" "STRT") nil "")
        org-agenda-skip-deadline-prewarning-if-scheduled t)

  (add-to-list 'org-agenda-custom-commands
               '("W" "Weekly review"
                 ((tags "PRIORITY=\"A\""
                        ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                         (org-agenda-overriding-header "High-priority unfinished tasks:")))
                  (agenda "" ((org-agenda-span 7)
                              (org-agenda-start-day "0d")
                              (org-agenda-start-on-weekday 1))) ; review upcoming deadlines and appointments
                                        ; type "l" in the agenda to review logged items
                  (stuck "") ; review stuck projects as designated by org-stuck-projects
                  (todo "STRT")
                  (todo "NEXT")
                  (todo "WAIT")
                  (todo "PROJ")
                  (todo "TODO"))
                 )
               )

  (add-to-list 'org-agenda-custom-commands
               '("T" "Daily planing"
                 ((agenda "" ((org-agenda-span 7)                      ;; overview of appointments
                              (org-agenda-start-on-weekday nil)
                              (org-agenda-start-day "0d"))         ;; calendar begins today
                          ) ; type "l" in the agenda to review logged items
                  (todo "STRT")
                  (todo "NEXT")
                  (todo "WAIT"))
                 )
               )

  (add-to-list 'org-agenda-custom-commands
               '("t" "Daily tasks"
                  ((agenda "" ((org-agenda-overriding-header "Today's agenda")
                               (org-agenda-span 1)
                               (org-agenda-start-day "0d")
                               (org-agenda-start-on-weekday nil))
                           ))
                  )
               )
  )
#+end_src


* Appearance
Use beautiful title-bar in macOS.
#+begin_src elisp
(when (string= system-type "darwin")
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
  (setq ns-auto-hide-menu-bar t)
  (setq ns-toggle-toolbar nil)
  (setq ns-right-alternate-modifier nil))
 #+end_src

Simplify mode-line.
#+begin_src elisp
(setq doom-modeline-buffer-encoding nil
      doom-modeline-percent-position nil)
#+end_src

Add time and battery to modeline.
#+begin_src elisp :tangle no
(display-time-mode 1)
(display-battery-mode 1)
#+end_src

Set fonts, doom-*-font inherits from doom-font.
#+begin_src elisp
(setq doom-font (font-spec :family "Iosevka SS05" :size 14 :weight 'medium)
      doom-variable-pitch-font (font-spec :family "Iosevka Aile")
      doom-unicode-font (font-spec :family "Iosevka SS05")
      doom-big-font (font-spec :family "Iosevka Etoile" :size 22))
#+end_src

** Theme
Pick theme using the macOS settings provided by emacs-plus.
#+begin_src elisp
(defun oguz/apply-theme (appearance)
  "Load theme, taking current system APPEARANCE into consideration."
  (mapc #'disable-theme custom-enabled-themes)
  (pcase appearance
    ('light (load-theme 'doom-one-light t))
    ('dark (load-theme 'doom-dracula t))))

(when (string= system-type "darwin")
  (add-hook 'ns-system-appearance-change-functions #'oguz/apply-theme))
#+end_src


** Custom
Use display font for org-headers
#+begin_src elisp
(custom-set-faces!
  '(outline-1 :family "Iosevka Etoile")
  '(outline-2 :family "Iosevka Etoile")
  '(outline-3 :family "Iosevka Etoile")
  '(outline-4 :family "Iosevka Etoile")
  '(outline-5 :family "Iosevka Etoile")
  '(outline-6 :family "Iosevka Etoile")
  '(outline-7 :family "Iosevka Etoile")
  '(outline-8 :family "Iosevka Etoile"))
#+end_src


* Editor
Speed up key help.
#+begin_src elisp
(setq which-key-idle-delay 0.5)
#+end_src

Allow multicursor skipping
#+begin_src elisp
(map!
 :prefix "gz"
 :nv "s" #'evil-mc-skip-and-goto-next-match
 :nv "S" #'evil-mc-skip-and-goto-prev-match)
#+end_src

Add magit folders
#+begin_src elisp
(setq magit-repository-directories '(("~/Workspace" . 2)
                                     ("~/.dotfiles" . 0)))
#+end_src

Asynchronously highlight files git status =treemacs=.
#+begin_src elisp
(setq +treemacs-git-mode 'deferred)
#+end_src

Use word-wrap in text modes.
#+begin_src elisp
;; (add-hook! '(text-mode-hook
;;              org-mode-hook
;;              org-capture-mode-hook
;;              elisp-mode-hook
;;              python-mode-hook)
;;            +word-wrap-mode)
#+end_src

#+begin_src elisp
(delete-selection-mode 1)                         ; Replace selection when inserting text
(global-subword-mode 1)                           ; Iterate through CamelCase words

(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 tab-width 4                                      ; Set width for tabs
 uniquify-buffer-name-style 'forward              ; Uniquify buffer names
 ;; window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      inhibit-compacting-font-caches t)           ; When there are lots of glyphs, keep them in memory
#+end_src

LSP mode config.
#+begin_src elisp
(after! lsp
  (setq lsp-response-timeout 30))
#+end_src

Use git-delta for syntax highlighting in magit-diff
#+begin_src elisp :tangle packages.el
;; (package! magit-delta :recipe (:host github :repo "dandavison/magit-delta"))
#+end_src
#+begin_src elisp
;; (use-package! magit-delta
;;   :hook (magit-mode . magit-delta-mode))
#+end_src

** Navigation
Use avy on all windows, e.g. open panels.
#+begin_src elisp
(setq avy-all-windows t)
#+end_src


** JS
*** Vue
#+begin_src elisp :tangle packages.el
(package! vue-mode
  :recipe (:host github :repo "AdamNiederer/vue-mode")
  )
#+end_src

#+begin_src elisp
(use-package! vue-mode
  :mode "\\.vue\\'"
  :config
  (add-hook 'vue-mode-hook #'lsp))
#+end_src

*** Prettier
#+begin_src elisp :tangle packages.el
(package! prettier
  :recipe (:host github :repo "jscheid/prettier.el")
  )
#+end_src

#+begin_src elisp
(use-package! prettier
  :config
  (add-hook 'after-init-hook #'global-prettier-mode))
#+end_src


** Python
Always use python binary to allow version controlling handling by pyenv.
#+begin_src elisp
(setq python-shell-interpreter "python")
#+end_src
#+begin_src elisp
(after! poetry
  (setq poetry-tracking-strategy 'projectile)
  )
#+end_src

#+begin_src elisp
(map! :map ein:notebook-mode-map
      :localleader
      "," #'+ein/hydra/body)
#+end_src

Configure Conda to use brew PATH on MacOS.
#+begin_src elisp
(custom-set-variables
 '(conda-anaconda-home "/usr/local/Caskroom/miniconda/base/")
 '(conda-env-autoactivate-mode t)
 )
#+end_src


** Gitignore
# https://www.hoowl.se/auto_inserting_gitignore_templates_in_emacs.html

Insert github .gitignore templates on file creation.
#+begin_src elisp
(defun hanno/template-insert-gitignore()
  (interactive)
  (let* ((dir (concat doom-private-dir "/templates/gitignore/"))
         (files (directory-files dir nil ".*\\.gitignore"))
         (pick (yas-choose-value (mapcar #'file-name-sans-extension files))))
    (insert-file-contents (concat dir (concat pick ".gitignore")))))
(map! :leader
      :desc "Insert template"
      "i t"
      'hanno/template-insert-gitignore)
#+end_src


* Apps
** TODO RSS
Auto update RSS feeds
#+begin_src elisp
(add-hook! 'elfeed-search-mode-hook 'elfeed-update)
#+end_src
